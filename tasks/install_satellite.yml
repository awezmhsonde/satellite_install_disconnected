---
# tasks file for satellite_install
- name: set the hostname
  hostname: 
    name: "{{ satellite_hostname }}"

- name: Adding hostname to /etc/hosts file
  lineinfile: 
    path: /etc/hosts
    regexp: '^127\.0\.0\.1'
    line: '127.0.0.1 {{ satellite_hostname}} localhost'
    state: present

#Mounting the disks
- name: Creating directories to mount
  file:
    path: "{{ item.mount_loc }}"
    state: directory
    mode: '0755'
  loop: "{{ disk_location }}"
  ignore_errors: yes
  when: ansible_mounts == item.mount_loc
  tags: dir_create

- name: Mounting the sat and rhel iso's
  mount: 
    path: "{{ item.mount_loc }}"
    src: "{{ item.disk_loc }}"
    state: mounted
    fstype: iso9660
    opts: ro,noauto
  loop: "{{ disk_location }}"

#Setting up repos 
- name: Creating the repo files
  yum_repository: 
    name: "{{ item.name }}"
    description: Repository for {{ item.name }} packages
    baseurl: "{{ 'file://' + item.mount_loc }}"
    gpgcheck: no
  loop: "{{ disk_location }}"
  tags: 
    - create_repo

- name: Create RHSCL repo
  yum_repository: 
    name: RHSCL-local
    description: Repository for RHSCL-local packages
    baseurl: "{{ 'file://' + item.mount_loc + '/RHSCL' }}"
    gpgcheck: no
    file: "{{ item.name }}"
  when: "item.name == 'satellite'"
  loop: "{{ disk_location }}"
  tags: 
    - rhscl_repo

- name: Create satellite maintenance repo
  yum_repository: 
    name: sat-maintenance-local
    description: Repository for sat-maintenance-local packages
    baseurl: "{{ 'file://' + item.mount_loc + '/sat-maintenance' }}"
    gpgcheck: no
    file: "{{ item.name }}"
  when: "item.name == 'satellite'"
  loop: "{{ disk_location }}"

- name: Importing GPG keys
  rpm_key: 
    state: present
    key: /etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-release

- name: Update the packages
  yum: 
    name: '*'
    state: latest

#Installing satellite packages
- name: Install Satellite packages using install_packages script
  block: 
  - name: Install satellite packages
    shell: exec "{{ item.mount_loc + '/install_packages' }}" 
    loop: "{{ disk_location }}"
    when: "item.name == 'satellite'"
    tags: 
      - install_script
  rescue: 
    - name: Implementing workaround for Satellite selinux policy issue
      copy: 
        src: "{{ sat_role_path + '/satellite_install/files/' +  item }}"
        dest: '/root/'
      loop: 
        - 'selinux-policy-3.13.1-268.el7_9.2.noarch.rpm'
        - 'selinux-policy-targeted-3.13.1-268.el7_9.2.noarch.rpm'
    
    - name: Installing the selinux files
      command: 'yum localinstall /root/selinux-policy-3.13.1-268.el7_9.2.noarch.rpm /root/selinux-policy-targeted-3.13.1-268.el7_9.2.noarch.rpm -y'
    
    - name: Install satellite
      yum: 
        name: satellite
        state: present
        
##Configure satellite using Answer file
- name: Copying answer file for Satellite configuration
  template: 
    src: /etc/ansible/roles/satellite_install/files/satellite-answers.j2
    dest: /etc/foreman-installer/scenarios.d/satellite-answers.yaml

- name: Configure satellite server 
  command: 'satellite-installer --scenario satellite'
  environment: 
    LANG: en_US.UTF-8
  register: sat_output
  
- name: Enable Satellite ports for Web Access
  firewalld: 
    service: RH-Satellite-6
    permanent: yes
    state: enabled
    immediate: yes
